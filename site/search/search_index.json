{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"INTRODUCTION Downloaad Source code for Mirmex can be downloaded from the ETH Seismology and Wave Physics software page . Reference Fichtner, A., Ermert, L., & Gokhberg, A. (2017). Seismic Noise Correlation on Heterogeneous Supercomputers. Seismological Research Letters, 88(4), 1141\u20131145, doi: 10.1785/0220170043 .","title":"INTRODUCTION"},{"location":"#introduction","text":"","title":"INTRODUCTION"},{"location":"#downloaad","text":"Source code for Mirmex can be downloaded from the ETH Seismology and Wave Physics software page .","title":"Downloaad"},{"location":"#reference","text":"Fichtner, A., Ermert, L., & Gokhberg, A. (2017). Seismic Noise Correlation on Heterogeneous Supercomputers. Seismological Research Letters, 88(4), 1141\u20131145, doi: 10.1785/0220170043 .","title":"Reference"},{"location":"introduction/","text":"Introduction Mirmex is a high\u2010performance tool for the computation of ambient seismic noise correlations on CPU and GPU clusters. This is intended to address emerging challenges in noise correlation studies with increasingly large data volumes. Mirmex implements a parallelization scheme and strategies to efficiently harness modern supercomputing resources, and shows that the use of GPUs can accelerate the computation of noise correlations by one order of magnitude or more compared with a homogeneous implementation on CPUs. In addition to reducing wall\u2010clock time, Mirmex enables on\u2010the\u2010fly computations of large noise correlation datasets, thereby eliminating the need for mass storage to archive results. Download Source code for Mirmex can be downloaded from the ETH Seismology and Wave Physics software page . How to run Data preparation The bash shell script setup_mirmex_dirs.sh creates the skeleton directory structure for an ambient noise correlation project: $ setup_mirmex_dirs.sh <path_to_project_dir> The script generates the following directories: DATA/raw : continuous data in SAC or miniSEED format DATA/resp : continuous response files in RESP format DATA/stationxlm : continuous station metadata in stationXLM format INPUT : contains station file input_stations.txt INPUT/PROCESSING : contains parameter files in XML format ( input_correction.xml and input_parstack.xml ) The file input_stations.txt contains one line for each station in NET.STA.LOC. format: IU.WCI.10. II.TLY.00. G.KIP.00. IU.KMBO.00. BK.CMB.00. IU.LCO.00. IU.KBS.10. Preprocessing Data preprocessing (decimation, removing mean, trend, and instrument response, ...) is done using the program par_ic_bat that can be called from the slurm job par_ic_bat.sbatch : #!/bin/bash -l #SBATCH --account=s868 #SBATCH --nodes=4 #SBATCH --ntasks=48 #SBATCH --ntasks-per-node=12 #SBATCH --ntasks-per-core=1 #SBATCH --cpus-per-task=1 #SBATCH --constraint=gpu #SBATCH --time=6:00:00 module load daint-gpu module load craype-accel-nvidia60 srun ./bin/par_ic_bat ./INPUT/PROCESSING/input_correction.xml Correlation and stacking Cross correlation and stacking of the pre-processed waveform data is done using the program par_st_gpu_bin that can be called from the slurm job par_st_bat.sbatch : #!/bin/bash -l #SBATCH --account=s868 #SBATCH --nodes=32 #SBATCH --ntasks=32 #SBATCH --ntasks-per-node=1 #SBATCH --ntasks-per-core=1 #SBATCH --cpus-per-task=1 #SBATCH --constraint=gpu #SBATCH --time=6:00:00 module load daint-gpu module load craype-accel-nvidia60 srun --wait=600 ./bin/par_st_gpu_bin ./INPUT/PROCESSING/input_parstack.xml Output files DATA/processed : contains output files from data pre-processing DATA/processed/out : reports DATA/processed/<tag> : miniSEED files with continuous data segments DATA/processed/xmlinput : input XLM parameter files used for this <tag> DATA/correlations : contains output files from cross-correlation and stacking DATA/correlations/out : reports DATA/correlations/<label> : correlations in SAC format (and phase weights is PWS is used) DATA/correlations/xmlinput : input XLM parameter files used for this <label> Publication Fichtner, A., Ermert, L., & Gokhberg, A. (2017). Seismic Noise Correlation on Heterogeneous Supercomputers. Seismological Research Letters, 88(4), 1141\u20131145, doi: 10.1785/0220170043 .","title":"Introduction"},{"location":"introduction/#introduction","text":"Mirmex is a high\u2010performance tool for the computation of ambient seismic noise correlations on CPU and GPU clusters. This is intended to address emerging challenges in noise correlation studies with increasingly large data volumes. Mirmex implements a parallelization scheme and strategies to efficiently harness modern supercomputing resources, and shows that the use of GPUs can accelerate the computation of noise correlations by one order of magnitude or more compared with a homogeneous implementation on CPUs. In addition to reducing wall\u2010clock time, Mirmex enables on\u2010the\u2010fly computations of large noise correlation datasets, thereby eliminating the need for mass storage to archive results.","title":"Introduction"},{"location":"introduction/#download","text":"Source code for Mirmex can be downloaded from the ETH Seismology and Wave Physics software page .","title":"Download"},{"location":"introduction/#how-to-run","text":"","title":"How to run"},{"location":"introduction/#data-preparation","text":"The bash shell script setup_mirmex_dirs.sh creates the skeleton directory structure for an ambient noise correlation project: $ setup_mirmex_dirs.sh <path_to_project_dir> The script generates the following directories: DATA/raw : continuous data in SAC or miniSEED format DATA/resp : continuous response files in RESP format DATA/stationxlm : continuous station metadata in stationXLM format INPUT : contains station file input_stations.txt INPUT/PROCESSING : contains parameter files in XML format ( input_correction.xml and input_parstack.xml ) The file input_stations.txt contains one line for each station in NET.STA.LOC. format: IU.WCI.10. II.TLY.00. G.KIP.00. IU.KMBO.00. BK.CMB.00. IU.LCO.00. IU.KBS.10.","title":"Data preparation"},{"location":"introduction/#preprocessing","text":"Data preprocessing (decimation, removing mean, trend, and instrument response, ...) is done using the program par_ic_bat that can be called from the slurm job par_ic_bat.sbatch : #!/bin/bash -l #SBATCH --account=s868 #SBATCH --nodes=4 #SBATCH --ntasks=48 #SBATCH --ntasks-per-node=12 #SBATCH --ntasks-per-core=1 #SBATCH --cpus-per-task=1 #SBATCH --constraint=gpu #SBATCH --time=6:00:00 module load daint-gpu module load craype-accel-nvidia60 srun ./bin/par_ic_bat ./INPUT/PROCESSING/input_correction.xml","title":"Preprocessing"},{"location":"introduction/#correlation-and-stacking","text":"Cross correlation and stacking of the pre-processed waveform data is done using the program par_st_gpu_bin that can be called from the slurm job par_st_bat.sbatch : #!/bin/bash -l #SBATCH --account=s868 #SBATCH --nodes=32 #SBATCH --ntasks=32 #SBATCH --ntasks-per-node=1 #SBATCH --ntasks-per-core=1 #SBATCH --cpus-per-task=1 #SBATCH --constraint=gpu #SBATCH --time=6:00:00 module load daint-gpu module load craype-accel-nvidia60 srun --wait=600 ./bin/par_st_gpu_bin ./INPUT/PROCESSING/input_parstack.xml","title":"Correlation and stacking"},{"location":"introduction/#output-files","text":"DATA/processed : contains output files from data pre-processing DATA/processed/out : reports DATA/processed/<tag> : miniSEED files with continuous data segments DATA/processed/xmlinput : input XLM parameter files used for this <tag> DATA/correlations : contains output files from cross-correlation and stacking DATA/correlations/out : reports DATA/correlations/<label> : correlations in SAC format (and phase weights is PWS is used) DATA/correlations/xmlinput : input XLM parameter files used for this <label>","title":"Output files"},{"location":"introduction/#publication","text":"Fichtner, A., Ermert, L., & Gokhberg, A. (2017). Seismic Noise Correlation on Heterogeneous Supercomputers. Seismological Research Letters, 88(4), 1141\u20131145, doi: 10.1785/0220170043 .","title":"Publication"},{"location":"parfiles/","text":"Parameter files Pre-processing Parameter file input_correction.xml <?xml version='1.0' encoding='UTF-8'?> <processing_parameters> <!--preprocessing run: Name, description. Must be included.--> <prepname>sts-1_2014</prepname> <comment>Preprocessing with new cpp tool</comment> <!--print output--> <verbose>1</verbose> <!--save output to file if set to 1. If set to 0, print to screen.--> <outfile>1</outfile> <!--plot and save time series and psd at various processing stages--> <check>0</check> <!--update mode, will search for already existing files in the out directories and only process the others.--> <update>0</update> <!--*************************************************************************************************--> <!--input and output directories--> <!--*************************************************************************************************--> <input> <!--input directory for data to be processed--> <indirs>/scratch/snx3000/alexey/ants/phase01/DATA/raw/</indirs> <!--time window covered roughly. (YYYY)--> <startyr>2013</startyr> <endyr>2014</endyr> </input> <!--*************************************************************************************************--> <!--quality checks--> <!--*************************************************************************************************--> <quality> <min_length_in_sec>3600</min_length_in_sec> <maxgaplen>60</maxgaplen> </quality> <!--*************************************************************************************************--> <!--preprocessing--> <!--*************************************************************************************************--> <!--preprocessing on individual seismograms--> <!--The order corresponds to the actual order of execution--> <processing> <!--split traces into shorter segments--> <split> <doit>1</doit> <length_in_sec>524288</length_in_sec> </split> <!--trim to nearest second--> <trim>1</trim> <!--remove linear trend--> <detrend>1</detrend> <!--remove mean--> <demean>1</demean> <!--taper edges of seismogram for better filtering--> <taper> <doit>1</doit> <taper_width>0.05</taper_width> </taper> <!--downsampling--> <!-- The original sampling rates are needed, because traces with a wrong sampling rate (like 1.0000004, I have seen that) need to be sorted out. Separate different sampling rates by whitespaces.--> <!-- If the new sampling rate is different from the old one, data will be downsampled.--> <!--A lowpass filter is hardcoded into downsampling. It has a corner frequency of one quarter of the new sampling frequency.--> <!--When a large amont of downsampling is performed, do it in two steps! e. g. instead of by factor 20 decimate by 5 then 4.--> <!--put in intermediate steps separated by spaces, e. g. 4.0 1.0--> <!--IMPORTANT: Since correlation windows are cut by start and end time in seconds, don't decimate below 1 Hz in the preprocessing stage, or you will run into difficulties with the window selection for correlation.--> <decimation> <Fs_old>1.0</Fs_old> <Fs_new>1.0</Fs_new> </decimation> <!--remove instrument response--> <instrument_response> <doit>1</doit> <unit>VEL</unit> <respdir>/scratch/snx3000/alexey/ants/phase01/DATA/resp/</respdir> <freqs>0.001 0.002 0.32 0.4</freqs> <waterlevel>0.0</waterlevel> </instrument_response> </processing> </processing_parameters> Correlation and stacking Parameter file input_parstack.xml . <?xml version='1.0' encoding='UTF-8'?> <stacking_parameters> <!-- NEW input: this environment variable is the one that contains the MPI rank. This is so that even on local systems, I do not have to use mpi4pi anymore, and the problem of knowing the rank is solved for both local and daint --> <rankvariable>ALPS_APP_PE</rankvariable> <!--print screen output--> <verbose>1</verbose> <!--select a test run. This saves an intermediate result at every time window (attention, needs ***LOTS*** (and lots and lots) of storage space)--> <check>1</check> <!--provide a name that will appear as 'stamp' on all correlations calculated in this run--> <corrname>test_cpp</corrname> <!--Describe briefly--> <comment>Run gpu correlation on Daint</comment> <!--Updating on a previous run? --> <update>1</update> <!--**************************************************************************************************--> <!--Specifics for data distribution to cores--> <!--**************************************************************************************************--> <data> <!--station ID list; containing entries in format net.sta.loc.cha --> <idfile>/scratch/snx3000/alexey/ants/phase01/INPUT/input_stations.txt</idfile> <!--How many station pairs for each core? Typically the number of files opened by that core is about n+1--> <npairs>4</npairs> <!-- Specify channel: LH, BH, VH... --> <channel>LH</channel> <!-- choose between Z and EN. 'All channels' is not implemented yet. 'EN' will provide you with RR, TT, and RT correlation --> <components>Z</components> <!-- Mix channels?--> <mix_cha>0</mix_cha> </data> <!--*************************************************************************************************--> <!--selection--> <!--*************************************************************************************************--> <selection> <!--Input directory containing data. Can only handle one input directory at the moment.--> <indir>/scratch/snx3000/alexey/ants/phase01/DATA/processed/sts-1_2014/</indir> <!--Enter preprocessing run name(s). Put * for any preprocessing--> <prepname>sts-1_2014</prepname> </selection> <!--*************************************************************************************************--> <!--Time--> <!--*************************************************************************************************--> <timethings> <!--Sampling rate.If different from sampling rate, data will be downsampled before correlation. --> <Fs>1.0</Fs> <!--Start date. Will only process files from this--> <startdate>20140101</startdate> <!--End date. Will only process files until this. Format yyyymmdd--> <enddate>20150101</enddate> <!--Length of the time windows to be correlated, in seconds--> <winlen>32768</winlen> <!--Overlap in SECONDS--> <!--Groos et al. recommend an overlap that is equal to the maximum lag--> <olap>6000</olap> </timethings> <!--*************************************************************************************************--> <!--Correlations--> <!--*************************************************************************************************--> <!--apply bandpass before correlating--> <bandpass> <doit>1</doit> <f_min>0.002</f_min> <f_max>0.05</f_max> <corners>3</corners> <!-- NEW input: Optional taper, useful to avoid filtering problems, ringing --> <taper> <doit>1</doit> <perc>0.05</perc> </taper> <!-- NEW input: A few additional options like whitening, glitch removal, onebit, which I do not consider important at the moment.--> </bandpass> <!--Type of correlations--> <correlations> <!--Autocorrelation yes or no--> <autocorr>0</autocorr> <!--Type of correlation: 'pcc','pcc','both'--> <corrtype>ccc</corrtype> <!-- NEW input: Normalize the correlations, or keep only the cross-coherency as given out by np. correlation, i.e. the Inverse Fourier transform of the product of the Fourier transform of one time series with the complex conjugate of the FT of the other --> <normalize>1</normalize> <!--Maximum lag in seconds--> <max_lag>12000</max_lag> <!--For phase cross-correlation: Specify exponent (cf Schimmel et al. 2013)--> <pcc_nu>1</pcc_nu> <!--For phase weighted stack: Specify type of stack: 0 is time domain, 1 time-scale-domain (using continuous wavelet transform)--> <tfpws>0</tfpws> </correlations> </stacking_parameters>","title":"Parameter files"},{"location":"parfiles/#parameter-files","text":"","title":"Parameter files"},{"location":"parfiles/#pre-processing","text":"Parameter file input_correction.xml <?xml version='1.0' encoding='UTF-8'?> <processing_parameters> <!--preprocessing run: Name, description. Must be included.--> <prepname>sts-1_2014</prepname> <comment>Preprocessing with new cpp tool</comment> <!--print output--> <verbose>1</verbose> <!--save output to file if set to 1. If set to 0, print to screen.--> <outfile>1</outfile> <!--plot and save time series and psd at various processing stages--> <check>0</check> <!--update mode, will search for already existing files in the out directories and only process the others.--> <update>0</update> <!--*************************************************************************************************--> <!--input and output directories--> <!--*************************************************************************************************--> <input> <!--input directory for data to be processed--> <indirs>/scratch/snx3000/alexey/ants/phase01/DATA/raw/</indirs> <!--time window covered roughly. (YYYY)--> <startyr>2013</startyr> <endyr>2014</endyr> </input> <!--*************************************************************************************************--> <!--quality checks--> <!--*************************************************************************************************--> <quality> <min_length_in_sec>3600</min_length_in_sec> <maxgaplen>60</maxgaplen> </quality> <!--*************************************************************************************************--> <!--preprocessing--> <!--*************************************************************************************************--> <!--preprocessing on individual seismograms--> <!--The order corresponds to the actual order of execution--> <processing> <!--split traces into shorter segments--> <split> <doit>1</doit> <length_in_sec>524288</length_in_sec> </split> <!--trim to nearest second--> <trim>1</trim> <!--remove linear trend--> <detrend>1</detrend> <!--remove mean--> <demean>1</demean> <!--taper edges of seismogram for better filtering--> <taper> <doit>1</doit> <taper_width>0.05</taper_width> </taper> <!--downsampling--> <!-- The original sampling rates are needed, because traces with a wrong sampling rate (like 1.0000004, I have seen that) need to be sorted out. Separate different sampling rates by whitespaces.--> <!-- If the new sampling rate is different from the old one, data will be downsampled.--> <!--A lowpass filter is hardcoded into downsampling. It has a corner frequency of one quarter of the new sampling frequency.--> <!--When a large amont of downsampling is performed, do it in two steps! e. g. instead of by factor 20 decimate by 5 then 4.--> <!--put in intermediate steps separated by spaces, e. g. 4.0 1.0--> <!--IMPORTANT: Since correlation windows are cut by start and end time in seconds, don't decimate below 1 Hz in the preprocessing stage, or you will run into difficulties with the window selection for correlation.--> <decimation> <Fs_old>1.0</Fs_old> <Fs_new>1.0</Fs_new> </decimation> <!--remove instrument response--> <instrument_response> <doit>1</doit> <unit>VEL</unit> <respdir>/scratch/snx3000/alexey/ants/phase01/DATA/resp/</respdir> <freqs>0.001 0.002 0.32 0.4</freqs> <waterlevel>0.0</waterlevel> </instrument_response> </processing> </processing_parameters>","title":"Pre-processing"},{"location":"parfiles/#correlation-and-stacking","text":"Parameter file input_parstack.xml . <?xml version='1.0' encoding='UTF-8'?> <stacking_parameters> <!-- NEW input: this environment variable is the one that contains the MPI rank. This is so that even on local systems, I do not have to use mpi4pi anymore, and the problem of knowing the rank is solved for both local and daint --> <rankvariable>ALPS_APP_PE</rankvariable> <!--print screen output--> <verbose>1</verbose> <!--select a test run. This saves an intermediate result at every time window (attention, needs ***LOTS*** (and lots and lots) of storage space)--> <check>1</check> <!--provide a name that will appear as 'stamp' on all correlations calculated in this run--> <corrname>test_cpp</corrname> <!--Describe briefly--> <comment>Run gpu correlation on Daint</comment> <!--Updating on a previous run? --> <update>1</update> <!--**************************************************************************************************--> <!--Specifics for data distribution to cores--> <!--**************************************************************************************************--> <data> <!--station ID list; containing entries in format net.sta.loc.cha --> <idfile>/scratch/snx3000/alexey/ants/phase01/INPUT/input_stations.txt</idfile> <!--How many station pairs for each core? Typically the number of files opened by that core is about n+1--> <npairs>4</npairs> <!-- Specify channel: LH, BH, VH... --> <channel>LH</channel> <!-- choose between Z and EN. 'All channels' is not implemented yet. 'EN' will provide you with RR, TT, and RT correlation --> <components>Z</components> <!-- Mix channels?--> <mix_cha>0</mix_cha> </data> <!--*************************************************************************************************--> <!--selection--> <!--*************************************************************************************************--> <selection> <!--Input directory containing data. Can only handle one input directory at the moment.--> <indir>/scratch/snx3000/alexey/ants/phase01/DATA/processed/sts-1_2014/</indir> <!--Enter preprocessing run name(s). Put * for any preprocessing--> <prepname>sts-1_2014</prepname> </selection> <!--*************************************************************************************************--> <!--Time--> <!--*************************************************************************************************--> <timethings> <!--Sampling rate.If different from sampling rate, data will be downsampled before correlation. --> <Fs>1.0</Fs> <!--Start date. Will only process files from this--> <startdate>20140101</startdate> <!--End date. Will only process files until this. Format yyyymmdd--> <enddate>20150101</enddate> <!--Length of the time windows to be correlated, in seconds--> <winlen>32768</winlen> <!--Overlap in SECONDS--> <!--Groos et al. recommend an overlap that is equal to the maximum lag--> <olap>6000</olap> </timethings> <!--*************************************************************************************************--> <!--Correlations--> <!--*************************************************************************************************--> <!--apply bandpass before correlating--> <bandpass> <doit>1</doit> <f_min>0.002</f_min> <f_max>0.05</f_max> <corners>3</corners> <!-- NEW input: Optional taper, useful to avoid filtering problems, ringing --> <taper> <doit>1</doit> <perc>0.05</perc> </taper> <!-- NEW input: A few additional options like whitening, glitch removal, onebit, which I do not consider important at the moment.--> </bandpass> <!--Type of correlations--> <correlations> <!--Autocorrelation yes or no--> <autocorr>0</autocorr> <!--Type of correlation: 'pcc','pcc','both'--> <corrtype>ccc</corrtype> <!-- NEW input: Normalize the correlations, or keep only the cross-coherency as given out by np. correlation, i.e. the Inverse Fourier transform of the product of the Fourier transform of one time series with the complex conjugate of the FT of the other --> <normalize>1</normalize> <!--Maximum lag in seconds--> <max_lag>12000</max_lag> <!--For phase cross-correlation: Specify exponent (cf Schimmel et al. 2013)--> <pcc_nu>1</pcc_nu> <!--For phase weighted stack: Specify type of stack: 0 is time domain, 1 time-scale-domain (using continuous wavelet transform)--> <tfpws>0</tfpws> </correlations> </stacking_parameters>","title":"Correlation and stacking"},{"location":"source/","text":"Source files The source code is inside the directory pkg and organized in the following directories: ant : pre-processing, correlation and stacking codes f2c : math functions (abs, sin, cos, sqrt for real, double, complex) obs : seismological tools (evalresp, libmseed, SAC, geodetics, ...) sci : math tools (fft, random numbers, ...) xml : reading of XML files (used for parameter files) Inside each of these directories there are normally 4 subdirectories. For example for obs : obs/bin : test binaries (except for ant/bin that contains the processing codes) obs/lib : libraries obs/prj : ? obs/src : source code ant Main programs for data pre-processing, correlation and stack for CPU and GPU. par_ic : processing ambient noises records par_st : parallel cross correlation and stacking with CPU par_st_gpu : parallel cross correlation and stacking with GPU f2c Mathemetical functions for different data types. arithchk include libf2c obs Seismological tools: remove instrument response, read and write miniSEED and SAC files, filtering, calculating geodetical distances. evalresp include libmseed obs_core obs_geodetics obs_mseed obs_sac obs_signal test_obs_geodetics test_obs_signal sci Mathematical tools: random numbers, FFT, etc. cephes cmplx_roots_sg fftpack include minpack2 num_core num_lib num_random num_testing randomkit sci_fft sci_optimize sci_signal sci_special test_sci_fft test_sci_optimize test_sci_signal xml Read XML files. core include sxb test_sxb unicode uri xmlprs","title":"Source files"},{"location":"source/#source-files","text":"The source code is inside the directory pkg and organized in the following directories: ant : pre-processing, correlation and stacking codes f2c : math functions (abs, sin, cos, sqrt for real, double, complex) obs : seismological tools (evalresp, libmseed, SAC, geodetics, ...) sci : math tools (fft, random numbers, ...) xml : reading of XML files (used for parameter files) Inside each of these directories there are normally 4 subdirectories. For example for obs : obs/bin : test binaries (except for ant/bin that contains the processing codes) obs/lib : libraries obs/prj : ? obs/src : source code","title":"Source files"},{"location":"source/#ant","text":"Main programs for data pre-processing, correlation and stack for CPU and GPU. par_ic : processing ambient noises records par_st : parallel cross correlation and stacking with CPU par_st_gpu : parallel cross correlation and stacking with GPU","title":"ant"},{"location":"source/#f2c","text":"Mathemetical functions for different data types. arithchk include libf2c","title":"f2c"},{"location":"source/#obs","text":"Seismological tools: remove instrument response, read and write miniSEED and SAC files, filtering, calculating geodetical distances. evalresp include libmseed obs_core obs_geodetics obs_mseed obs_sac obs_signal test_obs_geodetics test_obs_signal","title":"obs"},{"location":"source/#sci","text":"Mathematical tools: random numbers, FFT, etc. cephes cmplx_roots_sg fftpack include minpack2 num_core num_lib num_random num_testing randomkit sci_fft sci_optimize sci_signal sci_special test_sci_fft test_sci_optimize test_sci_signal","title":"sci"},{"location":"source/#xml","text":"Read XML files. core include sxb test_sxb unicode uri xmlprs","title":"xml"}]}